generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id             String    @id @default(cuid())
    name           String
    username       String    @unique
    email          String    @unique
    emailVerified  DateTime?
    profile        String    @default("")
    tagline        String    @default("")
    cover_image    String    @default("")
    bio            String    @default("")
    skills         String[]
    location       String    @default("")
    available      String    @default("")
    social         Json?
    following      User[]    @relation("follow")
    followers      User[]    @relation("follow")
    followersCount Int       @default(0)
    followingCount Int       @default(0)
    accounts       Account[]
    sessions       Session[]
    followingTags  Tag[]
    comments       Comment[] @relation("CommentAuthor")
    articles       Article[] @relation("author")
    likedArticles  Article[]
    likedComments  Comment[] @relation("CommentToUser")
    readArticles   Article[] @relation("ReadArticle")

    series Series[]

    notifications     Notification[] @relation("Notification Handler")
    notificationsFrom Notification[] @relation("Notification From")

    handle Handle?

    stripeCustomerId         String?
    stripeSubscriptionId     String?
    stripeSubscriptionStatus StripeSubscriptionStatus?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([email, username])
}

model Handle {
    id         String      @id @default(cuid())
    user       User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String      @unique
    name       String
    customTabs CustomTab[]
    social     Json?
    about      String?     @default("")
    handle     String      @unique
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    appearance Json?
    // Apperence JSON data:
    // layout: MAGAZINE STACKED GRID
    // CUSTOM LOGO

    @@index([userId, handle])
}

model CustomTab {
    id       String @id @default(cuid())
    label    String
    type     String @default("LINK")
    value    String
    priority Int    @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    handle   Handle @relation(fields: [handleId], references: [id], onDelete: Cascade)
    handleId String
}

model Tag {
    id             String    @id @default(cuid())
    name           String    @unique
    slug           String    @unique
    followers      User[]
    followersCount Int       @default(0)
    articlesCount  Int       @default(0)
    articles       Article[]
    description    String?
    logo           String?
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt

    @@index([name])
    @@index([slug])
}

model Comment {
    id         String  @id @default(cuid())
    user       User    @relation("CommentAuthor", fields: [userId], references: [id], onDelete: Cascade)
    userId     String
    article    Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
    articleId  String
    body       String
    likes      User[]  @relation("CommentToUser")
    likesCount Int     @default(0)

    type     CommentType
    parent   Comment?    @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
    parentId String?
    replies  Comment[]   @relation("CommentToComment")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([articleId])
}

enum CommentType {
    COMMENT
    REPLY
}

model Article {
    id               String    @id @default(cuid())
    title            String
    cover_image      String?
    cover_imageKey   String?
    user             User      @relation("author", fields: [userId], references: [id], onDelete: Cascade)
    userId           String
    content          String
    read_time        Int
    tags             Tag[]
    seoTitle         String?
    seoDescription   String?
    seoOgImage       String?
    seoOgImageKey    String?
    subtitle         String?
    disabledComments Boolean   @default(true)
    likes            User[]
    likesCount       Int       @default(0)
    slug             String    @unique
    comments         Comment[]
    commentsCount    Int       @default(0)
    readCount        Int       @default(0)
    readers          User[]    @relation("ReadArticle")
    isDeleted        Boolean   @default(false)

    series   Series? @relation(fields: [seriesId], references: [id], onDelete: Cascade)
    seriesId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([slug])
}

enum StripeSubscriptionStatus {
    incomplete
    incomplete_expired
    trialing
    active
    past_due
    canceled
    unpaid
    paused
}

model StripeEvent {
    id               String   @id @unique
    api_version      String?
    data             Json
    request          Json?
    type             String
    object           String
    account          String?
    created          DateTime
    livemode         Boolean
    pending_webhooks Int
}

model Series {
    id          String    @id @default(cuid())
    title       String    @unique
    description String?
    articles    Article[]
    author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId    String
    cover_image String?
    slug        String    @unique
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@index([slug])
}

model Notification {
    id        String            @id @default(cuid())
    type      NotificationTypes
    isRead    Boolean           @default(false)
    createdAt DateTime          @default(now())
    updatedAt DateTime          @updatedAt

    body          String? @default("")
    slug          String? @default("")
    title         String? @default("")
    articleAuthor String? @default("")

    user   User   @relation("Notification Handler", fields: [userId], references: [id], onDelete: Cascade)
    userId String

    from   User   @relation("Notification From", fields: [fromId], references: [id], onDelete: Cascade)
    fromId String
}

enum NotificationTypes {
    NEW_ARTICLE
    LIKE
    COMMENT
    MENTION
    FOLLOW
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@index([expires])
}
